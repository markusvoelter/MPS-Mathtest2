package aero;

/*Generated by MPS */

import sr.functionblocks.rt.main.IFunctionBlockImplementation;
import sr.functionblocks.rt.main.TestFailedException;
import sr.functionblocks.rt.main.ValueSetContainer;
import sr.functionblocks.rt.main.Value;
import sr.functionblocks.rt.main.DoubleComparer;

public class StuffontheWings_Implementation implements IFunctionBlockImplementation {
  public StuffontheWings_Implementation() {
  }

  public void runTests() throws TestFailedException {
    test_F_A();
    test_F_W();
  }

  public void test_F_A() throws TestFailedException {
    {

      ValueSetContainer c = new ValueSetContainer(new Value("Aircraft_c_a", 0.3), new Value("FundamentalStuff_p_dyn", 61.1125), new Value("Aircraft_A", 10.0));
      double actual = F_A(c);
      double expected = 36.75;
      if (!(DoubleComparer.isSame(actual, expected))) {
        throw new TestFailedException("test for function " + "F_A" + " expected: " + expected + ", actual: " + actual);
      }
    }
    {

      ValueSetContainer c = new ValueSetContainer(new Value("FundamentalStuff_p_dyn", 61.25), new Value("Aircraft_A", 10.0), new Value("Aircraft_c_a", 0.6));
      double actual = F_A(c);
      double expected = 367.5;
      if (!(DoubleComparer.isSame(actual, expected))) {
        throw new TestFailedException("test for function " + "F_A" + " expected: " + expected + ", actual: " + actual);
      }
    }
  }

  public double F_A(ValueSetContainer... values) {
    ValueSetContainer all = ValueSetContainer.createForAll(values);
    double Aircraft_A = (Double) all.getFor("Aircraft_A");
    double Aircraft_c_a = (Double) all.getFor("Aircraft_c_a");
    double FundamentalStuff_p_dyn;
    {
      Object t = all.getFor("FundamentalStuff_p_dyn");
      if (t != null) {
        FundamentalStuff_p_dyn = (Double) t;
      } else {
        FundamentalStuff_p_dyn = (Double) new FundamentalStuff_Implementation().p_dyn(all);
      }
    }
    return FundamentalStuff_p_dyn * Aircraft_A * Aircraft_c_a * Aircraft_A;
  }

  public void test_F_W() throws TestFailedException {
    {

      ValueSetContainer c = new ValueSetContainer(new Value("Aircraft_A", 10.0), new Value("Aircraft_c_w", 0.6), new Value("FundamentalStuff_p_dyn", 100.0));
      double actual = F_W(c);
      double expected = 600.0;
      if (!(DoubleComparer.isSame(actual, expected))) {
        throw new TestFailedException("test for function " + "F_W" + " expected: " + expected + ", actual: " + actual);
      }
    }
  }

  public double F_W(ValueSetContainer... values) {
    ValueSetContainer all = ValueSetContainer.createForAll(values);
    double Aircraft_A = (Double) all.getFor("Aircraft_A");
    double Aircraft_c_w = (Double) all.getFor("Aircraft_c_w");
    double FundamentalStuff_p_dyn;
    {
      Object t = all.getFor("FundamentalStuff_p_dyn");
      if (t != null) {
        FundamentalStuff_p_dyn = (Double) t;
      } else {
        FundamentalStuff_p_dyn = (Double) new FundamentalStuff_Implementation().p_dyn(all);
      }
    }
    return FundamentalStuff_p_dyn * Aircraft_A * Aircraft_c_w;
  }
}
