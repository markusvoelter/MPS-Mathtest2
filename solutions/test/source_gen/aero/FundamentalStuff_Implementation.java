package aero;

/*Generated by MPS */

import sr.functionblocks.rt.main.IFunctionBlockImplementation;
import sr.functionblocks.rt.main.TestFailedException;
import sr.functionblocks.rt.main.ValueSetContainer;
import sr.functionblocks.rt.main.Value;
import sr.functionblocks.rt.main.DoubleComparer;

public class FundamentalStuff_Implementation implements IFunctionBlockImplementation {
  public FundamentalStuff_Implementation() {
  }

  public void runTests() throws TestFailedException {
    test_p_dyn();
    test_someFct();
  }

  public void test_p_dyn() throws TestFailedException {
    {

      ValueSetContainer c = new ValueSetContainer(new Value("Aircraft_v", 10.0), new Value("Environment_rho", 1.225));
      double actual = p_dyn(c);
      double expected = 61.25;
      if (!(DoubleComparer.isSame(actual, expected))) {
        throw new TestFailedException("test for function " + "p_dyn" + " expected: " + expected + ", actual: " + actual);
      }
    }
    {

      ValueSetContainer c = new ValueSetContainer(new Value("Aircraft_v", 10.0), new Value("Environment_rho", 1.22225));
      double actual = p_dyn(c);
      double expected = 61.1125;
      if (!(DoubleComparer.isSame(actual, expected))) {
        throw new TestFailedException("test for function " + "p_dyn" + " expected: " + expected + ", actual: " + actual);
      }
    }
    {

      ValueSetContainer c = new ValueSetContainer(new Value("Aircraft_v", 20.0), new Value("Environment_rho", 1.225));
      double actual = p_dyn(c);
      double expected = 245;
      if (!(DoubleComparer.isSame(actual, expected))) {
        throw new TestFailedException("test for function " + "p_dyn" + " expected: " + expected + ", actual: " + actual);
      }
    }
  }

  public double p_dyn(ValueSetContainer... values) {
    ValueSetContainer all = ValueSetContainer.createForAll(values);
    double Environment_rho = (Double) all.getFor("Environment_rho");
    double Aircraft_v = (Double) all.getFor("Aircraft_v");
    return Math.pow(Environment_rho * Aircraft_v, 2);
  }

  public void test_someFct() throws TestFailedException {
    System.err.println("no tests specified for function " + "Fundamental Stuff.someFct");
  }

  public int someFct(ValueSetContainer... values) {
    ValueSetContainer all = ValueSetContainer.createForAll(values);
    return ((1) / (2)) * 17;
  }
}
