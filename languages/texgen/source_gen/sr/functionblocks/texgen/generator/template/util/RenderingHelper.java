package sr.functionblocks.texgen.generator.template.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baselanguage.dispatch.rt.ExpressionStatementWrapper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;

public class RenderingHelper {
  public RenderingHelper() {
  }

  public String unitToTex(final SNode unit) {
    return new ExpressionStatementWrapper<String>() {
      public String apply(SNode ex) {
        if (SNodeOperations.isInstanceOf(ex, "sr.si.structure.NoUnit")) {
          return "-";
        }
        if (SNodeOperations.isInstanceOf(ex, "sr.si.structure.CompositeUnit")) {
          return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(ex, "sr.si.structure.CompositeUnit"), "factors", true)).select(new ISelector<SNode, String>() {
            public String select(SNode it) {
              return unitToTex(it);
            }
          }).foldLeft("", new ILeftCombinator<String, String>() {
            public String combine(String s, String it) {
              return s = s + it + " ";
            }
          }).trim();
        }
        if (SNodeOperations.isInstanceOf(ex, "sr.si.structure.CompositeUnitFraction")) {
          return unitToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.si.structure.CompositeUnitFraction"), "numerator", true)) + "/" + unitToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.si.structure.CompositeUnitFraction"), "denominator", true));
        }
        System.err.println("falling through to default for " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(ex), "name"));
        return SConceptPropertyOperations.getString(unit, "alias");
      }
    }.apply(unit);
  }

  public String expressionToTex(final SNode ex) {
    return new ExpressionStatementWrapper<String>() {
      public String apply(SNode ex) {
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.structure.MulExpression")) {
          return expressionToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.structure.MulExpression"), "leftExpression", true)) + "\\hspace{1 mm}" + expressionToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.structure.MulExpression"), "rightExpression", true));
        }
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction")) {
          return "\\frac{" + expressionToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction"), "numerator", true)) + "}{" + expressionToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction"), "denominator", true)) + "}";
        }
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.structure.IntegerConstant")) {
          return String.valueOf(SPropertyOperations.getInteger(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value"));
        }
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.structure.FloatingPointConstant")) {
          return String.valueOf(SPropertyOperations.getString(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.structure.FloatingPointConstant"), "value"));
        }
        if (SNodeOperations.isInstanceOf(ex, "sr.math.structure.Exp")) {
          return expressionToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.math.structure.Exp"), "base", true)) + "^{" + expressionToTex(SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.math.structure.Exp"), "exp", true)) + "}";
        }
        if (SNodeOperations.isInstanceOf(ex, "sr.functionblocks.structure.SymbolReference")) {
          return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.functionblocks.structure.SymbolReference"), "symbol", false), "name");
        }
        System.err.println("falling through to default for " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(ex), "name"));
        return "";
      }
    }.apply(ex);
  }
}
