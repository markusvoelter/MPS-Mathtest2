package sr.functionblocks.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.constraints.CanBeAnAncestorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class FunctionSymbolExpressionWrapper_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer canBeAncesctorBreakingPoint = new SNodePointer("r:b2d0e1d6-8b40-4064-95cd-c4befc5a41eb(sr.functionblocks.constraints)", "7691223970093138533");

  public FunctionSymbolExpressionWrapper_Constraints() {
    super("sr.functionblocks.structure.FunctionSymbolExpressionWrapper");
  }

  @Override
  public boolean hasOwnCanBeAncestorMethod() {
    return true;
  }

  @Override
  public boolean canBeAncestor(IOperationContext context, SNode node, SNode node1, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAnAncestor(context, new CanBeAnAncestorContext(node, node1));

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeAncesctorBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAnAncestor(final IOperationContext operationContext, final CanBeAnAncestorContext _context) {
    return _context.getChildConcept() == SConceptOperations.findConceptDeclaration("sr.functionblocks.structure.SymbolReference") || SConceptOperations.isSubConceptOf(_context.getChildConcept(), "jetbrains.mps.baseLanguage.structure.IntegerLiteral") || SConceptOperations.isSubConceptOf(_context.getChildConcept(), "jetbrains.mps.baseLanguage.structure.BinaryOperation") || SConceptOperations.isSubConceptOf(_context.getChildConcept(), "jetbrains.mps.baseLanguage.structure.FloatingPointConstant") || _context.getChildConcept() == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction") || _context.getChildConcept() == SConceptOperations.findConceptDeclaration("sr.functionblocks.structure.FunctionSymbol") || SConceptOperations.isSubConceptOf(_context.getChildConcept(), "sr.math.structure.MathExpression") || SConceptOperations.isSubConceptOf(_context.getChildConcept(), "jetbrains.mps.baseLanguage.math.structure.MathSymbol") || SConceptOperations.isSubConceptOf(_context.getChildConcept(), "jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex");
  }
}
