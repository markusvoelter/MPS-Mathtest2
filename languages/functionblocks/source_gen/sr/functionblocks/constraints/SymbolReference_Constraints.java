package sr.functionblocks.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import sr.functionblocks.behavior.FunctionBlock_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class SymbolReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_vr3qxx_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:b2d0e1d6-8b40-4064-95cd-c4befc5a41eb(sr.functionblocks.constraints)", "7691223970092867352");

  public SymbolReference_Constraints() {
    super("sr.functionblocks.structure.SymbolReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("symbol", new BaseReferenceConstraintsDescriptor("symbol", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return FunctionBlock_Behavior.call_visibleSymbols_7691223970092901897(SNodeOperations.getAncestor(_context.getEnclosingNode(), "sr.functionblocks.structure.FunctionBlock", true, false));
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_vr3qxx_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
