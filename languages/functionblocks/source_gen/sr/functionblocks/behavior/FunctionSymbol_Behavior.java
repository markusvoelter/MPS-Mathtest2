package sr.functionblocks.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class FunctionSymbol_Behavior {
  public static void init(SNode thisNode) {
    SLinkOperations.setNewChild(thisNode, "expr", "sr.functionblocks.structure.FunctionSymbolExpressionWrapper");
  }

  public static void call_collectReferencedEnvSymbols_3006277004735674310(SNode thisNode, Set<SNode> result) {
    List<SNode> symrefs = SNodeOperations.getDescendants(thisNode, "sr.functionblocks.structure.SymbolReference", false, new String[]{});
    for (SNode symref : ListSequence.fromList(symrefs)) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(symref, "symbol", false), "sr.functionblocks.structure.EnvSymbol")) {
        SetSequence.fromSet(result).addElement(SNodeOperations.cast(SLinkOperations.getTarget(symref, "symbol", false), "sr.functionblocks.structure.EnvSymbol"));
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(symref, "symbol", false), "sr.functionblocks.structure.FunctionSymbol")) {
        FunctionSymbol_Behavior.call_collectReferencedEnvSymbols_3006277004735674310(SNodeOperations.cast(SLinkOperations.getTarget(symref, "symbol", false), "sr.functionblocks.structure.FunctionSymbol"), result);
      }
    }
  }

  public static List<SNode> call_referencedSymbols_3006277004735708695(SNode thisNode) {
    final Set<SNode> res = SetSequence.fromSet(new HashSet<SNode>());
    ListSequence.fromList(SNodeOperations.getDescendants(thisNode, "sr.functionblocks.structure.SymbolReference", false, new String[]{})).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SetSequence.fromSet(res).addElement(SLinkOperations.getTarget(it, "symbol", false));
      }
    });
    return SetSequence.fromSet(res).toListSequence();
  }

  public static SNode call_owningBlock_3006277004735845605(SNode thisNode) {
    return SNodeOperations.getAncestor(thisNode, "sr.functionblocks.structure.FunctionBlock", false, false);
  }

  public static String call_testMethodName_3893397118698831637(SNode thisNode) {
    return "test_" + SPropertyOperations.getString(thisNode, "name");
  }
}
