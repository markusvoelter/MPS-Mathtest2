package sr.functionblocks.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import sr.functionblocks.interpreter.TestExprInterpreter;
import sr.functionblocks.interpreter.UnitEngine;

public class interpreterStuffForFunctionSymbol extends EditorCellKeyMap {
  public interpreterStuffForFunctionSymbol() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new interpreterStuffForFunctionSymbol.interpreterStuffForFunctionSymbol_Action0();
    this.putAction("ctrl+shift", "VK_V", action);
  }

  public static class interpreterStuffForFunctionSymbol_Action0 extends EditorCellKeyMapAction {
    public interpreterStuffForFunctionSymbol_Action0() {
      this.setShownInPopupMenu(true);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("sr.functionblocks.structure.FunctionSymbol")) {
        return true;
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (SLinkOperations.getTarget(node, "testBlock", true) != null) {
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "testBlock", true), "tests", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            TestExprInterpreter.evaluateTest(it);
          }
        });
      }

      SNode unit = new UnitEngine().calculateUnit(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "expr", true), "expression", true));
      System.err.println(unit);
      SLinkOperations.setTarget(node, "resultingUnit", unit, true);
    }

    public String getKeyStroke() {
      return "ctrl shift V";
    }
  }
}
