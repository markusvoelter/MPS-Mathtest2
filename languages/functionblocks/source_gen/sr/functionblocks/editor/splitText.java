package sr.functionblocks.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class splitText extends EditorCellKeyMap {
  public splitText() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new splitText.splitText_Action0();
    this.putAction("ctrl+alt", "VK_L", action);
  }

  public static class splitText_Action0 extends EditorCellKeyMapAction {
    public splitText_Action0() {
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("sr.functionblocks.structure.DocumentationText")) {
        return true;
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      EditorCell_Property cell = (EditorCell_Property) editorContext.getContextCell();
      String text = cell.getText();
      int caretPos = cell.getCaretPosition();
      SNode doc = SNodeOperations.getAncestor(node, "sr.functionblocks.structure.Documentation", false, false);
      int p = SNodeOperations.getIndexInParent(node);
      String preText = text.substring(0, caretPos).trim();
      String postText = text.substring(caretPos).trim();
      SNode preNode = SNodeFactoryOperations.createNewNode("sr.functionblocks.structure.DocumentationText", null);
      SPropertyOperations.set(preNode, "text", preText);
      SNode postNode = SNodeFactoryOperations.createNewNode("sr.functionblocks.structure.DocumentationText", null);
      SPropertyOperations.set(postNode, "text", postText);
      SNodeOperations.replaceWithAnother(node, postNode);
      SNode symref = SNodeFactoryOperations.createNewNode("sr.functionblocks.structure.SymbolReference", null);
      ListSequence.fromList(SLinkOperations.getTargets(doc, "lines", true)).insertElement(p, symref);
      ListSequence.fromList(SLinkOperations.getTargets(doc, "lines", true)).insertElement(p, preNode);
      editorContext.select(symref);
    }

    public String getKeyStroke() {
      return "ctrl alt L";
    }
  }
}
