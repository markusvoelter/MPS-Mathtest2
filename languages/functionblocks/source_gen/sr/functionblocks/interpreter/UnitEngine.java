package sr.functionblocks.interpreter;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baselanguage.dispatch.rt.ExpressionStatementWrapper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import sr.si.behavior.Unit_Behavior;
import sr.si.rt.InternalCompositeUnit;

public class UnitEngine {
  public UnitEngine() {
  }

  public SNode calculateUnit(SNode ex) {
    SNode u = new ExpressionStatementWrapper<SNode>() {
      public SNode apply(SNode ex) {
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.structure.MulExpression")) {
          return multiply(calculateUnit(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.structure.MulExpression"), "leftExpression", true)), calculateUnit(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.structure.MulExpression"), "rightExpression", true)));
        }
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction")) {
          return divide(calculateUnit(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction"), "numerator", true)), calculateUnit(SLinkOperations.getTarget(SNodeOperations.cast(ex, "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction"), "denominator", true)));
        }
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.structure.IntegerConstant")) {
          return SConceptOperations.createNewNode("sr.si.structure.NoUnit", null);
        }
        if (SNodeOperations.isInstanceOf(ex, "jetbrains.mps.baseLanguage.structure.FloatingPointConstant")) {
          return SConceptOperations.createNewNode("sr.si.structure.NoUnit", null);
        }
        if (SNodeOperations.isInstanceOf(ex, "sr.math.structure.Exp")) {
          return exp(calculateUnit(SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.math.structure.Exp"), "base", true)), SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.math.structure.Exp"), "exp", true));
        }
        if (SNodeOperations.isInstanceOf(ex, "sr.functionblocks.structure.SymbolReference")) {
          return SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(ex, "sr.functionblocks.structure.SymbolReference"), "symbol", false), "unit", true));
        }
        System.err.println("falling through to default for " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(ex), "name"));
        return SConceptOperations.createNewNode("sr.si.structure.NoUnit", null);
      }
    }.apply(ex);
    return u;
  }

  public SNode multiply(SNode u1, SNode u2) {
    return Unit_Behavior.call_toInternal_1525172282798172010(u1).add(Unit_Behavior.call_toInternal_1525172282798172010(u2)).toUnit();
  }

  public SNode exp(SNode u1, SNode exponent) {
    System.out.println("u1: " + Unit_Behavior.call_toString_7203693294560873740(u1));
    InternalCompositeUnit res = new InternalCompositeUnit();
    for (int i = 0; i < SPropertyOperations.getInteger(exponent, "value"); i++) {
      res = res.add(Unit_Behavior.call_toInternal_1525172282798172010(u1));
    }
    return res.toUnit();
  }

  public SNode divide(SNode u1, SNode u2) {
    return Unit_Behavior.call_toInternal_1525172282798172010(u1).add(Unit_Behavior.call_toInternal_1525172282798172010(u2).inverse()).toUnit();
  }

  public boolean isCompatible(InternalCompositeUnit expected, InternalCompositeUnit actual) {
    InternalCompositeUnit res = expected.add(actual.inverse());
    return res.normalize().isEmpty();
  }
}
