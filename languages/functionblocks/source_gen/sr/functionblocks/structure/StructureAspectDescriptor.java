package sr.functionblocks.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"sr.functionblocks.structure.Block", "sr.functionblocks.structure.BlockImport", "sr.functionblocks.structure.BlockImportBlockRef", "sr.functionblocks.structure.BlockReference", "sr.functionblocks.structure.Documentation", "sr.functionblocks.structure.DocumentationText", "sr.functionblocks.structure.EnvBlock", "sr.functionblocks.structure.EnvSymbol", "sr.functionblocks.structure.ErrorMarker", "sr.functionblocks.structure.FunctionBlock", "sr.functionblocks.structure.FunctionSymbol", "sr.functionblocks.structure.FunctionSymbolExpressionWrapper", "sr.functionblocks.structure.FunctionUnitTest", "sr.functionblocks.structure.FunctionUnitTestBlock", "sr.functionblocks.structure.IBlockContent", "sr.functionblocks.structure.IDocContent", "sr.functionblocks.structure.InternalInterpreterErrorMarker", "sr.functionblocks.structure.JFunctionCall", "sr.functionblocks.structure.JVSReference", "sr.functionblocks.structure.JValueDefinition", "sr.functionblocks.structure.JValueSet", "sr.functionblocks.structure.PDFDocStructure", "sr.functionblocks.structure.RunTestsStatement", "sr.functionblocks.structure.Symbol", "sr.functionblocks.structure.SymbolReference", "sr.functionblocks.structure.SymbolValue"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.Block", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.BlockImport", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.BlockImportBlockRef", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"block"});
      case 3:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.BlockReference", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"block"});
      case 4:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.Documentation", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "sr.functionblocks.structure.IBlockContent"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.DocumentationText", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "sr.functionblocks.structure.IDocContent"}, new String[]{"text"}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.EnvBlock", "sr.functionblocks.structure.Block", false, new String[]{"sr.functionblocks.structure.Block"}, new String[]{}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.EnvSymbol", "sr.functionblocks.structure.Symbol", false, new String[]{"sr.functionblocks.structure.Symbol"}, new String[]{"description"}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.ErrorMarker", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{"errorMessage"}, new String[]{});
      case 9:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.FunctionBlock", "sr.functionblocks.structure.Block", false, new String[]{"sr.functionblocks.structure.Block"}, new String[]{}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.FunctionSymbol", "sr.functionblocks.structure.Symbol", false, new String[]{"sr.functionblocks.structure.Symbol"}, new String[]{"exported", "showTests"}, new String[]{});
      case 11:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.FunctionSymbolExpressionWrapper", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 12:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.FunctionUnitTest", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{"isOk"}, new String[]{});
      case 13:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.FunctionUnitTestBlock", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 14:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.IBlockContent", null, true, new String[]{}, new String[]{}, new String[]{});
      case 15:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.IDocContent", null, true, new String[]{}, new String[]{}, new String[]{});
      case 16:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.InternalInterpreterErrorMarker", "sr.functionblocks.structure.ErrorMarker", false, new String[]{"sr.functionblocks.structure.ErrorMarker"}, new String[]{}, new String[]{});
      case 17:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.JFunctionCall", "jetbrains.mps.baseLanguage.structure.Expression", false, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"}, new String[]{}, new String[]{"function"});
      case 18:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.JVSReference", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"valueSet"});
      case 19:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.JValueDefinition", "jetbrains.mps.baseLanguage.structure.Expression", false, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"}, new String[]{}, new String[]{"symbol"});
      case 20:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.JValueSet", "jetbrains.mps.baseLanguage.structure.Statement", false, new String[]{"jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IValidIdentifier"}, new String[]{}, new String[]{});
      case 21:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.PDFDocStructure", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier"}, new String[]{}, new String[]{});
      case 22:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.RunTestsStatement", "jetbrains.mps.baseLanguage.structure.Statement", false, new String[]{"jetbrains.mps.baseLanguage.structure.Statement"}, new String[]{}, new String[]{"block"});
      case 23:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.Symbol", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "sr.functionblocks.structure.IBlockContent"}, new String[]{}, new String[]{});
      case 24:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.SymbolReference", "jetbrains.mps.baseLanguage.structure.Expression", false, new String[]{"jetbrains.mps.baseLanguage.structure.Expression", "sr.functionblocks.structure.IDocContent"}, new String[]{}, new String[]{"symbol"});
      case 25:
        return new CompiledConceptDescriptor("sr.functionblocks.structure.SymbolValue", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
