package sr.functionblocks.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class JFunctionCall extends Expression {
  public static final String concept = "sr.functionblocks.structure.JFunctionCall";
  public static final String FUNCTION = "function";
  public static final String VALUES = "values";

  public JFunctionCall(SNode node) {
    super(node);
  }

  public FunctionSymbol getFunction() {
    return (FunctionSymbol) this.getReferent(FunctionSymbol.class, JFunctionCall.FUNCTION);
  }

  public void setFunction(FunctionSymbol node) {
    super.setReferent(JFunctionCall.FUNCTION, node);
  }

  public int getValuesesCount() {
    return this.getChildCount(JFunctionCall.VALUES);
  }

  public Iterator<JVSReference> valueses() {
    return this.children(JVSReference.class, JFunctionCall.VALUES);
  }

  public List<JVSReference> getValueses() {
    return this.getChildren(JVSReference.class, JFunctionCall.VALUES);
  }

  public void addValues(JVSReference node) {
    this.addChild(JFunctionCall.VALUES, node);
  }

  public void insertValues(JVSReference prev, JVSReference node) {
    this.insertChild(prev, JFunctionCall.VALUES, node);
  }

  public static JFunctionCall newInstance(SModel sm, boolean init) {
    return (JFunctionCall) SModelUtil_new.instantiateConceptDeclaration("sr.functionblocks.structure.JFunctionCall", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static JFunctionCall newInstance(SModel sm) {
    return JFunctionCall.newInstance(sm, false);
  }
}
