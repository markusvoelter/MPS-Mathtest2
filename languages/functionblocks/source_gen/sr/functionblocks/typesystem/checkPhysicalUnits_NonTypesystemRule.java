package sr.functionblocks.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import sr.si.rt.InternalCompositeUnit;
import sr.si.behavior.Unit_Behavior;
import sr.functionblocks.interpreter.UnitEngine;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkPhysicalUnits_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkPhysicalUnits_NonTypesystemRule() {
  }

  public void applyRule(final SNode functionSymbol, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SLinkOperations.getTarget(functionSymbol, "resultingUnit", true) != null) {
      InternalCompositeUnit expected = Unit_Behavior.call_toInternal_1525172282798172010(SLinkOperations.getTarget(functionSymbol, "unit", true));
      InternalCompositeUnit actual = Unit_Behavior.call_toInternal_1525172282798172010(SLinkOperations.getTarget(functionSymbol, "resultingUnit", true));
      if (!(new UnitEngine().isCompatible(expected, actual))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(functionSymbol, "unit", true), "incompatible unit types", "r:91f2afc4-82b5-4f5c-9baa-b5e3bcea0af6(sr.functionblocks.typesystem)", "7203693294560885595", null, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "sr.functionblocks.structure.FunctionSymbol";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
