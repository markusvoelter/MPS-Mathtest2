package jetbrains.mps.baselanguage.dispatch.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_DispatchedElementRef_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_DispatchedElementRef_InferenceRule() {
  }

  public void applyRule(final SNode dispatchedElementRef, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode c = SLinkOperations.getTarget(SNodeOperations.getAncestor(dispatchedElementRef, "jetbrains.mps.baselanguage.dispatch.structure.DispatchCase", false, false), "concept", false);
    SNode t = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.SNodeType", null);
    SLinkOperations.setTarget(t, "concept", c, false);
    {
      SNode _nodeToCheck_1029348928467 = dispatchedElementRef;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:0020a4f7-b1d9-4961-8343-c0e04c58d815(jetbrains.mps.baselanguage.dispatch.typesystem)", "1525172282798094313", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:0020a4f7-b1d9-4961-8343-c0e04c58d815(jetbrains.mps.baselanguage.dispatch.typesystem)", "1525172282798094310", true), (SNode) t, _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baselanguage.dispatch.structure.DispatchedElementRef";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
